Assignment Name: mini_serv
Expected File: mini_serv.c
Allowed functions:
---------------------------------------------------------
write, close, select, socket, accept, listen, send, recv,
bind, strstr, malloc, realloc, free, calloc, bzero,
atoi, sprintf, strlen, exit, strcpy, strcat, memset
---------------------------------------------------------

Write a program that will listen for client to connect on a certain port on 127.0.0.1
 and will let clients to speak with each other.

This program will take as first argument the port to bind to.
-If no argument is given, it should write in stderr: "Wrong number of arguments" followed by a \n and exit with status 1
-If a system calls returns an error before the program start accpepting connection, it should write in stderr "Fatal error" followed by a \n and exit with status 1
-If you can't allocate memory, it should write in stderr "Fatal error" followed by a \n and exit with status 1

Your program must be non-blocking, but client can be lazy, if they don't read your message, you must not disconnect them.

Your program must not contains #define preproc.
Your program must only listen to 127.0.0.1
The fd that you will receive will already be set to make 'recv' or 'send' to block if select hasn't been called before calling them, but will not block otherwise.

When a client connect to the server
 - the client will be given an id, first client will receive a id 0 and each new client will receive the last client id + 1
 - %d will be replaced by this number
 - a message is sent to all the clients that was connected to the server: "server: client %d just arrived\n"
Clients must be able to send messages to your program
 - A message will only be printable characters, no need to check
 - A single message always ends with a \n
 - A single message will never be longer than 4096 characters
 - When the server receive a message, it must resend it to all the other client with "client %d:" before the message

When a client disconnect from the server
 - a message is sent to all the client that was connected to the server "server: client %d just left\n"

Memory of fd leaks are forbidden.
To help you with the beginning of a server, we have given you a main.c program. It may have forbidden functions.
Warning:
 - Tester expects you to be fast, no unnecessary buffer
 - you can test with nc (man nc)
 - you should test with nc
 - To test, you can use fcntl(fd, F_SETFL, O_NONBLOCK), and select() do not check EAGAIN
